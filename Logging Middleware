const express = require('express');
const axios = require('axios');
const fs = require('fs');
const app = express();

app.use(express.json());

// 🧾 Logging Middleware
app.use((req, res, next) => {
  const logEntry = {
    time: new Date().toISOString(),
    method: req.method,
    url: req.originalUrl,
    headers: req.headers,
    body: req.body
  };

  fs.appendFile('request_logs.json', JSON.stringify(logEntry, null, 2) + ',\n', err => {
    if (err) console.error('Logging failed:', err);
  });

  console.log(`[${logEntry.time}] ${req.method} ${req.originalUrl}`);
  next();
});

// 📬 Register Route
app.post('/register', async (req, res) => {
  try {
    const response = await axios.post('http://20.244.56.144/evaluation-service/register/', req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

// 🔐 Auth Route
app.post('/auth', async (req, res) => {
  try {
    const response = await axios.post('http://20.244.56.144/evaluation-service/auth', req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    res.status(error.response?.status || 500).json({ error: error.message });
  }
});

// 🚀 Start Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Logging middleware server running on port ${PORT}`);
});
